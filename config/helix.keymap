/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

/* NOTE: At the time of the creation of this keymap, there are no specified codes for 'eisuu' and 'kana' input in ZMK.
However, 'LANG1' and 'LANG2' are fully-functioning candidates for 'kana' and 'eisuu' input respectively.
As such, those are in use within the default layer at this time.*/

/ {
    combos {
        compatible = "zmk,combos";

        gamemod {
            bindings = <&tog 5>;
            key-positions = <5 1>;
            layers = <0 5>;
        };

        QE_W {
            bindings = <&kp W>;
            key-positions = <2 3>;
            layers = <0>;
        };

        EH_Y {
            bindings = <&kp Y>;
            key-positions = <3 4>;
            layers = <0>;
        };

        ZE_A {
            bindings = <&kp A>;
            key-positions = <3 14>;
            layers = <0>;
        };

        ZH_S {
            bindings = <&kp S>;
            key-positions = <4 14>;
            layers = <0>;
        };

        QH_D {
            bindings = <&kp D>;
            key-positions = <4 2>;
            layers = <0>;
        };

        QK_U {
            bindings = <&kp U>;
            key-positions = <2 16>;
            layers = <0>;
        };

        EK_J {
            bindings = <&kp J>;
            key-positions = <3 16>;
            layers = <0>;
        };

        ZC_X {
            bindings = <&kp X>;
            key-positions = <14 15>;
            layers = <0>;
        };

        ZK_N {
            bindings = <&kp N>;
            key-positions = <14 16>;
            layers = <0>;
        };

        CK_I {
            bindings = <&kp I>;
            key-positions = <15 16>;
            layers = <0>;
        };

        TC_R {
            bindings = <&kp R>;
            key-positions = <15 26>;
            layers = <0>;
        };

        TK_F {
            bindings = <&kp F>;
            key-positions = <16 26>;
            layers = <0>;
        };

        TM_V {
            bindings = <&kp V>;
            key-positions = <26 28>;
            layers = <0>;
        };

        MZ_O {
            bindings = <&kp O>;
            key-positions = <14 28>;
            layers = <0>;
        };

        MC_L {
            bindings = <&kp L>;
            key-positions = <15 28>;
            layers = <0>;
        };

        TB_G {
            bindings = <&kp G>;
            key-positions = <26 27>;
            layers = <0>;
        };

        BM_P {
            bindings = <&kp P>;
            key-positions = <27 28>;
            layers = <0>;
        };

        QT_WIN {
            bindings = <&sk LEFT_WIN>;
            key-positions = <26 2>;
            layers = <0>;
        };

        EB_ALT {
            bindings = <&sk LEFT_ALT>;
            key-positions = <27 3>;
            layers = <0>;
        };

        HM_CTRL {
            bindings = <&sk LCTRL>;
            key-positions = <28 4>;
            layers = <0>;
        };

        CMB_CTRLZ {
            bindings = <&kp LC(Z)>;
            key-positions = <1 29>;
        };

        CMB_CTRLX {
            bindings = <&kp LC(X)>;
            key-positions = <2 29>;
            layers = <0>;
        };

        CMB_CTRLC {
            bindings = <&kp LC(C)>;
            key-positions = <29 3>;
            layers = <0>;
        };

        CMB_CTRLV {
            bindings = <&kp LC(V)>;
            key-positions = <4 29>;
            layers = <0>;
        };

        CMB_QZ {
            bindings = <&kp EXCLAMATION>;
            key-positions = <2 14>;
            layers = <0>;
        };

        CMB_EC {
            bindings = <&kp QUESTION>;
            key-positions = <3 15>;
            layers = <0>;
        };

        CMB_HK {
            bindings = <&kp MINUS>;
            key-positions = <4 16>;
            layers = <0>;
        };

        CMB_ZT {
            bindings = <&kp SLASH>;
            key-positions = <14 26>;
            layers = <0>;
        };

        CMB_CB {
            bindings = <&kp COMMA>;
            key-positions = <15 27>;
            layers = <0>;
        };

        CMB_KM {
            bindings = <&kp PERIOD>;
            key-positions = <16 28>;
        };

        NUM_CMB_PLUS {
            bindings = <&kp PLUS>;
            key-positions = <15 26>;
            layers = <2>;
        };

        NUM_CMB_MINUS {
            bindings = <&kp MINUS>;
            key-positions = <15 28>;
            layers = <2>;
        };

        NUM_CMB_MULT {
            bindings = <&kp KP_MULTIPLY>;
            key-positions = <16 26>;
            layers = <2>;
        };

        NUM_CMB_DIV {
            bindings = <&kp KP_DIVIDE>;
            key-positions = <14 28>;
        };

        NUM_CMB_EQUAL {
            bindings = <&kp EQUAL>;
            key-positions = <16 14>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // | GRAVE  |   1    |   2    |   3    |   4    |   5    |                                      |   6    |   7    |   8    |   9    |   0    |  DEL   |
            // |  TAB   |   Q    |   W    |   E    |   R    |   T    |                                      |   Y    |   U    |   I    |   O    |   P    |  BSPC  |
            // |  CTRL  |   A    |   S    |   D    |   F    |   G    |                                      |   H    |   J    |   K    |   L    |   ;    |   '    |
            // |  SHIFT |   Z    |   X    |   C    |   V    |   B    |  LBKT  |                    |  RBKT  |   N    |   M    |   ,    |   .    |   /    |  RET   |
            // | ADJUST |  ESC   |  ALT   |  LGUI  | EISUU  | LOWER  | SPACE  |                    |  SPACE | RAISE  |  KANA  |  LEFT  |  DOWN  |  UP    |  RIGHT |

            bindings = <
&none  &lt 4 ESCAPE     &kp Q  &kp E  &kp H  &lt 1 TAB                              &trans  &trans  &trans  &trans  &trans  &trans
&none  &lt 3 BACKSPACE  &kp Z  &kp C  &kp K  &kp LANG_HANGEUL                       &trans  &trans  &trans  &trans  &trans  &trans
&none  &lt 2 SPACE      &kp T  &kp B  &kp M  &mt LEFT_SHIFT ENTER                   &trans  &trans  &trans  &trans  &trans  &trans
&none  &none            &none  &none  &none  &none                 &none    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&none  &none            &none  &none  &none  &none                 &none    &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        sign {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |      |      |      |      |      |      |                                  |      |      |      |      |      |      |
            // |  ~   |  !   |  @   |  #   |  $   |  %   |                                  |  ^   |  &   |  *   |  (   |  )   |      |
            // |      |      |      |      |      |      |                                  |      |  _   |  +   |  {   |  }   | PIPE |
            // |      |      |      |      |      |      |  (   |                    |  )   |      |      |      | HOME | END  |      |
            // |      |      |      |      |      |      |      |                    |      |      |      |      |      |      |      |

            bindings = <
&none  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SQT            &kp GRAVE  &none                   &none  &none  &none  &none  &none  &none
&none  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOUBLE_QUOTES  &none      &none                   &none  &none  &none  &none  &none  &none
&none  &kp LESS_THAN         &kp GREATER_THAN       &kp SEMI           &none      &trans                  &none  &none  &none  &none  &none  &none
&none  &none                 &none                  &none              &none      &none   &none    &none  &none  &none  &none  &none  &none  &none
&none  &none                 &none                  &none              &none      &none   &none    &none  &none  &none  &none  &none  &none  &none
            >;
        };

        num {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |       |       |       |       |       |                                    |       |       |       |       |       |       |
            // |   `   |   1   |   2   |   3   |   4   |   5   |                                    |   6   |   7   |   8   |   9   |   0   |  DEL  |
            // |       |  F1   |  F2   |  F3   |  F4   |  F5   |                                    |  F6   |   -   |   =   |   [   |   ]   |   \   |
            // |       |  F7   |  F8   |  F9   |  F10  |  F11  |       |                    |       |  F12  |       | PSCRN | PG_DN | PG_UP |       |
            // |       |       |       |       |       |       |       |                    |       |       |       | NEXT  | VOL-  | VOL+  | PLAY  |

            bindings = <
&none  &trans  &kp NUMBER_9  &kp NUMBER_8  &kp NUMBER_7  &none                         &none  &none  &none  &none  &none  &none
&none  &trans  &kp NUMBER_6  &kp NUMBER_5  &kp NUMBER_4  &kp NUMBER_0                  &none  &none  &none  &none  &none  &none
&none  &trans  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp DOT                       &none  &none  &none  &none  &none  &none
&none  &none   &none         &none         &none         &none         &none    &none  &none  &none  &none  &none  &none  &none
&none  &none   &none         &none         &none         &none         &none    &none  &none  &none  &none  &none  &none  &none
            >;
        };

        nav {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |    `     |    !     |    @     |    #     |    $     |    %     |                                          |    ^     |    &     |    *     |    (     |    )     |  EP TOG  |
            // |  BT CLR  | BT SEL0  | BT SEL1  | BT SEL2  | BGT SEL3 | BT SEL4  |                                          | RGB EFF+ | RGB HUE+ | RGB SAT+ | RGB SPD+ | RGB BRI+ | RGB TOG  |
            // |  BT NXT  | OUT TOG  | OUT USB  | OUT BLE  |          |          |                                          | RGB EFF- | RGB HUE- | RGB SAT- | RGB SPD- | RGB BRI- |          |
            // |  BT PRV  |          |          |          |          |          |    {     |                    |    }     |          |          |          |          |          |          |
            // |          |          |          |          |          |          |          |                    |          |          |          |          |          |          |          |

            bindings = <
&none  &trans  &kp HOME  &kp UP_ARROW  &kp END    &kp PG_UP                  &none  &none  &none  &none  &none  &none
&none  &trans  &kp LEFT  &kp DOWN      &kp RIGHT  &kp PG_DN                  &none  &none  &none  &none  &none  &none
&none  &trans  &none     &none         &none      &trans                     &none  &none  &none  &none  &none  &none
&none  &none   &none     &none         &none      &none      &none    &none  &none  &none  &none  &none  &none  &none
&none  &none   &none     &none         &none      &none      &none    &none  &none  &none  &none  &none  &none  &none
            >;
        };

        func {
            bindings = <
&none  &none  &kp F2  &none      &kp LA(F4)  &none                           &none  &none  &none  &none  &none  &none
&none  &none  &none   &kp LG(S)  &none       &bt BT_CLR_ALL                  &none  &none  &none  &none  &none  &none
&none  &none  &none   &none      &none       &none                           &none  &none  &none  &none  &none  &none
&none  &none  &none   &none      &none       &none           &none    &none  &none  &none  &none  &none  &none  &none
&none  &none  &none   &none      &none       &none           &none    &none  &none  &none  &none  &none  &none  &none
            >;
        };

        GAME {
            bindings = <
&none  &kp NUMBER_6  &kp NUMBER_2  &kp W  &kp NUMBER_3  &kp NUMBER_4                  &none  &none  &none  &none  &none  &none
&none  &kp NUMBER_1  &kp A         &kp S  &kp D         &kp NUMBER_5                  &none  &none  &none  &none  &none  &none
&none  &none         &none         &none  &none         &lt 6 SPACE                   &none  &none  &none  &none  &none  &none
&none  &none         &none         &none  &none         &none         &none    &none  &none  &none  &none  &none  &none  &none
&none  &none         &none         &none  &none         &none         &none    &none  &none  &none  &none  &none  &none  &none
            >;
        };

        GAME_2 {
            bindings = <
&none  &none  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0                  &none  &none  &none  &none  &none  &none
&none  &none  &none         &none         &none         &none                         &none  &none  &none  &none  &none  &none
&none  &none  &none         &none         &none         &trans                        &none  &none  &none  &none  &none  &none
&none  &none  &none         &none         &none         &none         &none    &none  &none  &none  &none  &none  &none  &none
&none  &none  &none         &none         &none         &none         &none    &none  &none  &none  &none  &none  &none  &none
            >;
        };
    };
};
